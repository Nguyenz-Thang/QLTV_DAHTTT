// backend/src/app/models/theLoaiModel.js
const { getPool, sql } = require("../../config/db");

// üü¢ L·∫•y t·∫•t c·∫£ th·ªÉ lo·∫°i
async function getAll() {
  const pool = await getPool();
  const result = await pool.request().query("SELECT * FROM TheLoai");
  return result.recordset;
}

// üü¢ Th√™m th·ªÉ lo·∫°i (T·ª∞ SINH M√É)
async function create({ tenTL, moTa }) {
  const pool = await getPool();

  // üîπ L·∫•y m√£ l·ªõn nh·∫•t hi·ªán c√≥ trong DB
  const result = await pool.request().query(`
    SELECT TOP 1 maTL 
    FROM TheLoai 
    ORDER BY maTL DESC
  `);

  // üîπ Sinh m√£ m·ªõi (VD: TL01, TL02, TL03,‚Ä¶)
  let newMaTL = "TL01";
  if (result.recordset.length > 0) {
    const lastMa = result.recordset[0].maTL; // TL05
    const number = parseInt(lastMa.replace("TL", "")) + 1;
    newMaTL = "TL" + Date.now();
  }

  // üîπ Th√™m th·ªÉ lo·∫°i m·ªõi
  await pool
    .request()
    .input("maTL", sql.VarChar, newMaTL)
    .input("tenTL", sql.NVarChar, tenTL)
    .input("moTa", sql.NVarChar, moTa).query(`
      INSERT INTO TheLoai (maTL, tenTL, moTa)
      VALUES (@maTL, @tenTL, @moTa)
    `);

  return { maTL: newMaTL, tenTL, moTa, message: "Th√™m th·ªÉ lo·∫°i th√†nh c√¥ng" };
}

// üü° C·∫≠p nh·∫≠t th·ªÉ lo·∫°i (c√≥ ki·ªÉm tra t·ªìn t·∫°i)
async function update(maTL, { tenTL, moTa }) {
  const pool = await getPool();

  // üîπ Ki·ªÉm tra th·ªÉ lo·∫°i c√≥ t·ªìn t·∫°i kh√¥ng
  const check = await pool
    .request()
    .input("maTL", sql.VarChar, maTL)
    .query("SELECT * FROM TheLoai WHERE maTL = @maTL");

  if (check.recordset.length === 0) {
    throw new Error("Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t");
  }

  // üîπ C·∫≠p nh·∫≠t
  await pool
    .request()
    .input("maTL", sql.VarChar, maTL)
    .input("tenTL", sql.NVarChar, tenTL)
    .input("moTa", sql.NVarChar, moTa).query(`
      UPDATE TheLoai
      SET tenTL = @tenTL, moTa = @moTa
      WHERE maTL = @maTL
    `);

  return { maTL, tenTL, moTa, message: "C·∫≠p nh·∫≠t th·ªÉ lo·∫°i th√†nh c√¥ng" };
}

// üî¥ X√≥a th·ªÉ lo·∫°i (ki·ªÉm tra t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a)
async function remove(maTL) {
  const pool = await getPool();

  // üîπ Ki·ªÉm tra th·ªÉ lo·∫°i c√≥ t·ªìn t·∫°i kh√¥ng
  const check = await pool
    .request()
    .input("maTL", sql.VarChar, maTL)
    .query("SELECT * FROM TheLoai WHERE maTL = @maTL");

  if (check.recordset.length === 0) {
    throw new Error("Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i ƒë·ªÉ x√≥a");
  }

  // üîπ X√≥a n·∫øu t·ªìn t·∫°i
  await pool
    .request()
    .input("maTL", sql.VarChar, maTL)
    .query("DELETE FROM TheLoai WHERE maTL = @maTL");

  return { message: "X√≥a th·ªÉ lo·∫°i th√†nh c√¥ng" };
}

// üîç T√¨m ki·∫øm th·ªÉ lo·∫°i
async function search(keyword) {
  const pool = await getPool();
  const result = await pool
    .request()
    .input("keyword", sql.NVarChar, `%${keyword}%`).query(`
      SELECT * FROM TheLoai 
      WHERE tenTL LIKE @keyword OR moTa LIKE @keyword
    `);
  return result.recordset;
}

module.exports = { getAll, create, update, remove, search };
